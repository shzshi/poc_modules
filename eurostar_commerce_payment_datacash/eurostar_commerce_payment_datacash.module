<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for testing and
 *   development.
 */


/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment methods settings form included
 * as part of the payment methods enabling action in Rules
 */
function eurostar_commerce_payment_datacash_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'eurostar_datacash_client' => '',
    'eurostar_datacash_password' => '',
  );

  $form['eurostar_datacash_client'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Datacash client.'),
    '#default_value' => $settings['eurostar_datacash_client'],
  );

  $form['eurostar_datacash_password'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Datacash password.'),
    '#default_value' => $settings['eurostar_datacash_password'],
  );

  $form['eurostar_datacash_server_prefix'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => t('Test or Production server.'),
    // @see https://datacash.custhelp.com/cgi-bin/datacash.cfg/php/enduser/std_adp.php?p_faqid=57
    '#options' => array('testserver.' => t('Testing'), 'mars.transaction.' => t('Production')),
    '#default_value' => $settings['eurostar_datacash_server_prefix'],
  );

  return $form;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function eurostar_commerce_payment_datacash_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['eurostar_commerce_payment_datacash'] = array(
    'title' => t('Datacash'),
    'short_title' => t('Datacash'),
    'display_title' => t('Datacash'),
    'description' => t('Integrates Datacash payment system'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function eurostar_commerce_payment_datacash_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['eurostar_commerce_payment_datacash'])) {
    $pane_values += $order->data['eurostar_commerce_payment_datacash'];
  }

  // Merge in default values.
  $pane_values += array(
    'name' => '',
  );
  $form['card_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card number'),
    '#description' => t('Enter your 16 digit card number'),
    '#default_value' => $pane_values['card_number'],
    '#required' => TRUE,
  );
  $form['card_expire'] = array(
    '#type' => 'item',
    '#title' => t('Card expires on'),

  );
  $form['card_expire']['month'] = array(
    '#type' => 'select',
    '#options' => drupal_map_assoc(range(1, 12), 'map_month'),
    '#default_value' => $pane_values['card_expire']['month'],
    '#required' => TRUE,
  );
  $form['card_expire']['year'] = array(
    '#type' => 'select',
    '#default_value' => $pane_values['card_expire']['year'],
    '#options' => drupal_map_assoc(range(date('Y'), date('Y')+50)),
    '#required' => TRUE,
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name on the card'),
    '#default_value' => $pane_values['name'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function eurostar_commerce_payment_datacash_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Throw an error if a long enough name was not provided.
  if (strlen($pane_values['name']) < 2) {
    form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));

    // Even though the form error is enough to stop the submission of the form,
    // it's not enough to stop it from a Commerce standpoint because of the
    // combined validation / submission going on per-pane in the checkout form.
    return FALSE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function eurostar_commerce_payment_datacash_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['eurostar_commerce_payment_datacash'] = $pane_values;

  eurostar_commerce_payment_datacash_transaction($payment_method, $order, $charge, $pane_values);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function eurostar_commerce_payment_datacash_transaction($payment_method, $order, $charge, $card_details) {
  
  //$transaction = commerce_payment_transaction_new('eurostar_commerce_payment_datacash', $order->order_id);
  /*
  $transaction = new stdObject();
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Name: @name';
  $transaction->message_variables = array('@name' => $card_details['name']);
  $transaction->expirydate = $card_details['card_expire']['month'] . '/' . $card_details['card_expire']['year'];
  $transaction->pan = $card_details['card_number'];
  */
  //TODO: Details that are not in commerce variable, but datacash need
  // $merchantreference =
  // $capturemethod =


  $message = eurostar_commerce_payment_datacash_get_xml($payment_method, $order, $charge, $card_details);
  $pool = messagequeue_get_test_pool();
  $pool->send('/queue/datacash', $message);
  
  //commerce_payment_transaction_save($transaction);
  
}
/*
 *  Helper function to generate XML
 *
 */
function eurostar_commerce_payment_datacash_get_xml($payment_method, $order, $charge, $card_details) {
  $output = array();

  $output[] = '<?xml version="1.0" encoding="UTF-8"?>';
  $output[] = '<Request>';
  $output[] = '  <UserAgent>';
  $output[] = '    <architecture version="2.6.32-5-686">i386-Linux</architecture>';
  $output[] = '    <language vendor="Sun Microsystems Inc." version="20.1-b02" vm-name="Java HotSpot(TM) Client VM">Java</language>';
  $output[] = '    <Libraries>';
  $output[] = '      <lib version="v2-1-3">XMLDocument</lib>';
  $output[] = '    </Libraries>';
  $output[] = '  </UserAgent>';
  $output[] = '  <Authentication>';
  $output[] = '    <password>' . $payment_method['settings']['eurostar_datacash_password'] . ' </password>';
  $output[] = '    <client>' . $payment_method['settings']['eurostar_datacash_client'] . '</client>';
  $output[] = '  </Authentication>';
  $output[] = '  <Transaction>';
  $output[] = '    <TxnDetails>';
  $output[] = '      <merchantreference>208e3de08c3e241aa0</merchantreference>';
  $output[] = '      <capturemethod>ecomm</capturemethod>';
  $output[] = '      <amount currency="' . $charge['currency_code'] . '">' . $charge['amount']. '</amount>';
  $output[] = '    </TxnDetails>';
  $output[] = '    <CardTxn>';
  $output[] = '      <method>auth</method>';
  $output[] = '      <Card>';
  $output[] = '        <expirydate>' . $card_details['card_expire']['month'] . '/' . $card_details['card_expire']['year'] . '</expirydate>';
  $output[] = '        <pan>' . $card_details['card_number'] . '</pan>';
  $output[] = '      </Card>';
  $output[] = '    </CardTxn>';
  $output[] = '  </Transaction>';
  $output[] = '</Request>';

  return implode("\n", $output);
}
